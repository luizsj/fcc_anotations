Arrays
    myArray.push(value)
            adiciona o value no final do Array
    myVar = myArray.pop() 
            remove o último índice de myArray e atribui para myVar
    myVar = myArray.shift()
            remove o índice 0 de myArray e atribui para myVar
            o valor  que estava no índice 1 passa para zero
    myArray.unshift(value)        
            adiciona value na posição 0 de myArray
            os índices já existem movem 1 posição para a direita

Objects
    obj.hasOwnProperty("name") = true/false, checar se a propriedade existe no objeto

CountDown
function countdown(n){
  if (n <= 0) {
    return [];
  } else {
    const countArray = countdown(n-1);
    countArray.unshift(n);
    return countArray;
  }
  
}
// Only change code above this line
let s = countdown(15);
console.log(s);
[ 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1 ]

------------
We have defined a function named rangeOfNumbers with two parameters. 
The function should return an array of integers which begins with a number 
    represented by the startNum parameter and ends with a number represented by the endNum parameter. 
    The starting number will always be less than or equal to the ending number. 
    Your function must use recursion by calling itself and not use loops of any kind. 
    It should also work for cases where both startNum and endNum are the same.

function rangeOfNumbers(startNum, endNum) {
  if (endNum - startNum == 0){
    return [startNum];
  } else {
  const arr = rangeOfNumbers(startNum, endNum -1);
  arr.push(endNum);
  return arr;
  }
};

let result = rangeOfNumbers(1,20);
console.log(result);
[ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20 ]

----------------------

const doubler = item => item * 2;
const multiplier = (item, multi) => item * multi;
multiplier(4, 2);

const greeting = (name = "Anonymous") => "Hello " + name;
const increment = (number, value = 1) => number + value;



const sum = (x, y, z) => {
  const args = [x, y, z];
  return args.reduce((a, b) => a + b, 0);
}
QUE É IGUAL A
const sum = (...args) => args.reduce((a, b) => a + b, 0);

=============
SPREAD operator
significa passar um array como sendo um conjunto separado por vírgulas
    const arr = [6, 89, 3, 45];
    const maximus = Math.max(...arr);
 neste caso, será aplicado Math.max(6,89,3,45)
 porque o argumento esperado são valores separados por virgulas, nào um array

        const arr1 = ['JAN', 'FEB', 'MAR', 'APR', 'MAY'];
        let arr2;
        arr2 = [...arr1];  // Change this line
        console.log(arr2);
Este exemplo copia o conteudo de arr1 para arr2
    porque o argumento esperando em varname = [arg] é uma lista separada por vírgulas

=================
DESTRUCTURING OBJECTS
desconstruir um objeto
atribuir para variáveis os valores das propriedades de um objeto
        const user = { name: 'John Doe', age: 34 };
        const name = user.name;
        const age = user.age;
    É IGUAL A
        const { name, age } = user;
        -------
        const HIGH_TEMPERATURES = {
            yesterday: 75,
            today: 77,
            tomorrow: 80
        };
        const {today, tomorrow} = HIGH_TEMPERATURES;        

Destructuring com novos nomes
        const user = { name: 'John Doe', age: 34 };
        const { name: userName, age: userAge } = user;

        const HIGH_TEMPERATURES = {
            yesterday: 75,
            today: 77,
            tomorrow: 80
        };
        const {today: highToday, tomorrow: highTomorrow } = HIGH_TEMPERATURES; 

Destructuring com objetos aninhados
        const user = {
            johnDoe: { 
                age: 34,
                email: 'johnDoe@freeCodeCamp.com'
            }
        };
        const { johnDoe: { age, email }} = user;        
    isso define as constantes age e email
        const { johnDoe: { age: userAge, email: userEmail }} = user;
    isso define userAge e userEmail

        const LOCAL_FORECAST = {
            yesterday: { low: 61, high: 75 },
            today: { low: 64, high: 77 },
            tomorrow: { low: 68, high: 80 }
        };
        const {today : {low: lowToday, high: highToday}} = LOCAL_FORECAST;        
    isso define lowToday e highToday com os valores do sub-objeto today


=================
DESTRUCTURING ARRAYS
desconstruir um array
atribuir para variáveis os valores dos itens de um array

            const [a, b] = [1, 2, 3, 4, 5, 6];
            console.log(a, b);
        The console will display the values of a and b as 1, 2.

            const [a, b,,, c] = [1, 2, 3, 4, 5, 6];
            console.log(a, b, c);
        The console will display the values of a, b, and c as 1, 2, 5.

            const [a, b, ...arr] = [1, 2, 3, 4, 5, 7];
            console.log(a, b);
            console.log(arr);
        The console would display the values 1, 2 and [3, 4, 5, 7].        

===============
DESTRUCTURING IN FUNCTION parameters
        const profileUpdate = ({ name, age, nationality, location }) => {
                //fuction body
        }
    isso permite passar um objeto (pode ser um array?) 
        como parametro na chamada da função

            const stats = {
            max: 56.78,
            standard_deviation: 4.34,
            median: 34.54,
            mode: 23.87,
            min: -0.75,
            average: 35.85
            };
            const half = (stats) => (stats.max + stats.min) / 2.0; 
        É IGUAL A
            const half = ({max, min}) => {
                return (max + min) /2.0;
            }
        porque ao passar o objeto stats para a função half
            ela recebe como parâmetro somente as propriedades min e max
            desse objeto
            
