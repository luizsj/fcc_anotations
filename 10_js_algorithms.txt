function reverseString(str) {
  let newStr = '';
  for (let i = str.length -1; i >= 0; i--) {
    newStr += str[i];
  }
  return str;
}

reverseString("hello");

--------------------------------------------
function factorialize(num) {
  let result = 1;
    while (num > 1) {
      result *= num;
      num--;
    }
  return result;
}

factorialize(5);

----------------------------------------------

    function findLongestWordLength(str) {
      let regex = /\w+/g;
      let wordsArray = str.match(regex);
      console.log(wordsArray);
      let maxLength = 1;
      for (let i = 0; i < wordsArray.length; i++){
        if (wordsArray[i].length > maxLength) {
          maxLength = wordsArray[i].length;
        }
      }
      console.log(maxLength);
      return maxLength;
    }

    findLongestWordLength("The quick brown fox jumped over the lazy dog");

-------------------------------------

Largest Number in Array of Arrays
function largestOfFour(arr) {
  let newArr = [];
  for (let i=0; i < arr.length; i++) {
    let subArr = arr[i];
    let maxValue = 0;
    for (let j = 0; j < subArr.length; j++) {
      if ((subArr[j] > maxValue) || (maxValue == 0 && maxValue > subArr[j])) {
        maxValue = subArr[j];
      } 
    }
    newArr.push(maxValue);
  }
  console.log(newArr);
  return newArr;
}

largestOfFour([[4, 5, 1, 3], [13, 27, 18, 26], [32, 35, 37, 39], [1000, 1001, 857, 1]]);
largestOfFour([[17, 23, 25, 12], [25, 7, 34, 48], [4, -10, 18, 21], [-72, -3, -17, -10]]);

---------------------------------
Confirm Ending of a String
  confirmEnding("Bastian", "n");
      function confirmEnding(str, target) {
        return str.endsWith(target);
      }
      function confirmEnding(str, target) {
        let strLength = str.length;
        let targetLength = target.length;
        return str.substr(strLength - targetLength, targetLength) == target;
      }
      
---------------------------------
function repeatStringNumTimes(str, num) {
  let result = '';
  while (num > 0) {
    result += str;
    num--;
  }
  return result;
}

repeatStringNumTimes("abc", 3);

--------------------------------------
Truncate a String
      function truncateString(str, num) {
        if (num >= str.length) {
          return str;
        } else {
          return str.substr(0, num) + '...';
        }
      }

      truncateString("A-tisket a-tasket A green and yellow basket", 8);

-------------------------
function findElement(arr, func) {
  let num ;
  for (let i=0; i < arr.length; i++){
    if (typeof num == 'undefined') {
      if (func(arr[i])) {
        num = arr[i];
        console.log(num);
      }
    }
  }
  return num;
}

findElement([1, 2, 3, 4], num => num % 2 === 0);

------------------------
Test if is Boolean
function booWho(bool) {
  return (typeof bool == 'boolean');
}

booWho(null);

-----------------------------
Capitalize a phrase

function titleCase(str) {
  str = str.toLowerCase();
  let word = '';
  let newStr = '';
  for (let i=0; i < str.length; i++) {
    if (str[i] != ' '){
      word += (word == '') ? str[i].toUpperCase() : str[i];
    } else {
      if (newStr == '') {
        newStr = word;
      } else {
        newStr += ' '+word;
      }
      word = '';
    }
  }
  newStr += ' '+word;
  console.log(newStr);
  return newStr;
}

titleCase("I'm a little tea pot");

-------------------------------
Slice and Splice
You are given two arrays and an index.
Copy each element of the first array into the second array, in order.
Begin inserting elements at index n of the second array.
Return the resulting array. The input arrays should remain the same after the function runs.

frankenSplice([1, 2, 3], [4, 5], 1) should return [4, 1, 2, 3, 5].
frankenSplice([1, 2], ["a", "b"], 1) should return ["a", 1, 2, "b"].
frankenSplice(["claw", "tentacle"], ["head", "shoulders", "knees", "toes"], 2) 
            should return ["head", "shoulders", "claw", "tentacle", "knees", "toes"].
All elements from the first array should be added to the second array in their original order. 
            frankenSplice([1, 2, 3, 4], [], 0) should return [1, 2, 3, 4].
The first array should remain the same after the function runs.
The second array should remain the same after the function runs.

      function frankenSplice(arr1, arr2, n) {
        let startArr = arr2.slice(0, n);
        let endArr = arr2.slice(n, arr2.length)
        let newArr = [...startArr, ...arr1, ...endArr];
        return newArr;
      }

      frankenSplice([1, 2, 3], [4, 5, 6], 1);


-----------------------------
Falsy Bouncer
    Remove all falsy values from an array.
    Falsy values in JavaScript are false, null, 0, "", undefined, and NaN.
    Hint: Try converting each value to a Boolean.      

          function bouncer(arr) {
            let newArr = [];
            for (let i=0; i < arr.length; i++) {
              if (Boolean(arr[i])) {
                newArr.push(arr[i]);
              }
            }
            console.log(newArr);
            return newArr;
          }

          bouncer([7, "ate", "", false, 9]);

-----------------------
Where do I Belong
Return the lowest index at which a value (second argument) should be inserted into an array (first argument) 
    once it has been sorted. The returned value should be a number.
For example, getIndexToIns([1,2,3,4], 1.5) should return 1 because it is greater than 1 (index 0),
   but less than 2 (index 1).
Likewise, getIndexToIns([20,3,5], 19) should return 2 
  because once the array has been sorted it will look like [3,5,20] 
  and 19 is less than 20 (index 2) and greater than 5 (index 1).   

getIndexToIns([10, 20, 30, 40, 50], 35) should return 3.
getIndexToIns([10, 20, 30, 40, 50], 30) should return 2.
getIndexToIns([40, 60], 50) should return 1.
getIndexToIns([3, 10, 5], 3) should return 0.
getIndexToIns([5, 3, 20, 3], 5) should return 2.
getIndexToIns([2, 20, 10], 19) should return 2.
getIndexToIns([2, 5, 10], 15) should return 3.
getIndexToIns([], 1) should return 0.

function getIndexToIns(arr, num) {
  let newarr = arr.sort((a, b) => a - b);
  let minValue = arr[0];
  let maxValue = arr[arr.length-1];
  let result = 0;
  if (num < minValue) {
    result = 0;
  } else if (num > maxValue) {
    result =  arr.length;
  } else if (arr.length == 2) {
    result = 1;
  } else {
    for (let i=1; i < arr.length - 1; i++) {
      if (num == arr[i]) {
        result =  i;
      } else {
        if (num > arr[i] && num < arr[i+1]) {
          result = i+1;
        }
      }
    }
  }
  return result;
}

getIndexToIns([5, 3, 20, 3], 5);

-------------
Mutations
Checar se todas as letras de uma string existem em outra string
Return true if the string in the first element of the array contains all of the letters 
      of the string in the second element of the array.

For example, ["hello", "Hello"], should return true because all of the letters in the second string are present in the first, 
    ignoring case.
The arguments ["hello", "hey"] should return false because the string hello does not contain a y.
Lastly, ["Alien", "line"], should return true because all of the letters in line are present in Alien.

function mutation(arr) {
    let result = true;
    let target = arr[0].toLowerCase();
    let base = arr[1].toLowerCase();
  
    for (let i=0; i < base.length && result; i++) {
      let idx = target.indexOf(base[i]);
      if (idx == -1) {
        result = false;
      }
    }
    console.log(result);
    return result;
  }
  
  mutation(["Mary", "Aarmy"]);


  --------------------------
  Chunky Monkey
Write a function that splits an array (first argument) into groups the length of size (second argument)
 and returns them as a two-dimensional array.

chunkArrayInGroups(["a", "b", "c", "d"], 2) should return [["a", "b"], ["c", "d"]].
chunkArrayInGroups([0, 1, 2, 3, 4, 5], 3) should return [[0, 1, 2], [3, 4, 5]].
chunkArrayInGroups([0, 1, 2, 3, 4, 5], 2) should return [[0, 1], [2, 3], [4, 5]].
chunkArrayInGroups([0, 1, 2, 3, 4, 5], 4) should return [[0, 1, 2, 3], [4, 5]].

function chunkArrayInGroups(arr, size) {
  let result = [];
  for (let i=0; i < arr.length; i += size) {
    result.push(arr.slice(i, i+size));
    console.log(result);
  }
  return result;
}

chunkArrayInGroups([0, 1, 2, 3, 4, 5, 6, 7, 8], 4);





